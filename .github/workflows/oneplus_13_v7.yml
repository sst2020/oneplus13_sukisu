name: oneplus_13
on:
  workflow_dispatch:
    inputs:
      CPU:
        description: "选择编译CPU类型"
        required: true
        default: 'sm8750'
      FEIL:
        description: "设备配置"
        required: true
        default: 'oneplus_13'
      CPUD:
        description: "处理器代号"
        required: true
        default: 'sun'
      ANDROID_VERSION:
        description: "内核Android版本"
        required: true
        default: 'android15'
      KERNEL_VERSION:
        description: "内核版本"
        required: true
        default: '6.6'
      KERNEL_SUFFIX: 
        description: "自定义内核名称后缀 (例如: -By-User-4k)" 
        required: true
        default: '-android15-8-g013ec21bba94-abogki383916444' 
      KERNEL_TIME:
       description: "自定义内核构建时间 (默认: 原厂时间)"
       required: true
       default: '2024-12-17 23:36:49 UTC' 
      enable_feature_x: # KPM
       description: "是否启用KPM支持"
       required: false
       default: false
       type: boolean
      enable_feature_y: # LZ4KD for ZRAM
       description: "是否启用LZ4KD压缩用于ZRAM (内核6.6+). 如果未选中，ZRAM使用标准LZ4." 
       required: false
       default: false 
       type: boolean
      enable_feature_z: # FengChi driver
       description: "是否添加风驰驱动"
       required: false
       default: true
       type: boolean
      
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      CCACHE_DIR: /home/runner/.ccache
      CCACHE_MAXSIZE: 8G
    outputs:
      zip_name: ${{ steps.prepare_zip.outputs.zip_filename }}

    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192 
          temp-reserve-mb: 2048 
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          
      - name: Check out repository code
        uses: actions/checkout@v4
          
      - name: Configure Git
        run: |
          git config --global user.name "sst2020" 
          git config --global user.email "3362402439@qq.com" 

      - name: Install dependencies
        run: |
          sudo apt update && sudo apt upgrade -y
          sudo apt install -y python3 git curl patch ccache

      - name: Restore ccache
        uses: actions/cache@v3
        id: ccache 
        with:
          path: ${{ env.CCACHE_DIR }} 
          key: ccache-${{ runner.os }}-${{ github.ref }}-${{ github.sha }} 
          restore-keys: |
            ccache-${{ runner.os }}-${{ github.ref }}-
            ccache-${{ runner.os }}-
      
      - name: Setup ccache
        if: steps.ccache.outputs.cache-hit != 'true'
        run: |
          echo "初始化ccache..." 
          ccache -Cz 
          ccache -M ${{ env.CCACHE_MAXSIZE }}
          echo "Ccache已初始化，最大大小设置为 ${{ env.CCACHE_MAXSIZE }}."
        
      - name: Display ccache stats before operations
        run: |
          echo "初始Ccache统计信息:"
          ccache -s

      - name: Install repo tool
        run: |
          mkdir -p $GITHUB_WORKSPACE/bin
          curl -sSL https://storage.googleapis.com/git-repo-downloads/repo > $GITHUB_WORKSPACE/bin/repo
          chmod a+x $GITHUB_WORKSPACE/bin/repo
          echo "$GITHUB_WORKSPACE/bin" >> $GITHUB_PATH
          echo "Repo工具已安装." 

      - name: Clone TheWildJames Patches Repo (for 69_hide_stuff.patch)
        run: |
          git clone https://github.com/TheWildJames/kernel_patches.git TheWildJames_kernel_patches --depth=1

      - name: Initialize repo and sync
        run: |
          set -e 
          which repo || (echo "错误: 在安装repo工具步骤后，'which repo'未在PATH中找到repo." && exit 1)
          
          mkdir kernel_workspace && cd kernel_workspace
          repo init -u https://github.com/JiuGeFaCai/kernel_manifest.git -b refs/heads/oneplus/${{ github.event.inputs.CPU }} -m ${{ github.event.inputs.FEIL }}.xml --depth=1
          repo --trace sync -c -j$(nproc --all) --no-tags --no-clone-bundle --optimized-fetch --fail-fast
          rm kernel_platform/common/android/abi_gki_protected_exports_* || echo "没有受保护的导出!"
          rm kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "没有受保护的导出!"
         
      - name: Set up SukiSU
        run: | 
          set -e
          cd $GITHUB_WORKSPACE/kernel_workspace/kernel_platform
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-dev
          cd ./KernelSU
          KSU_VERSION_VALUE=$(expr $(/usr/bin/git rev-list --count main) "+" 10606) 
          echo "KSUVER=${KSU_VERSION_VALUE}" >> $GITHUB_ENV 
          sed -i "s/DKSU_VERSION=12800/DKSU_VERSION=${KSU_VERSION_VALUE}/" kernel/Makefile 
        
      - name: Set up susfs
        run: |
          set -e 
          cd $GITHUB_WORKSPACE/kernel_workspace/kernel_platform

          SUSFS_CLONE_TARGET_REL="../susfs4ksu" 
          SUKISU_PATCH_CLONE_TARGET_REL="../SukiSU_patch"
          SUSFS_BRANCH="gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}"

          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b "${SUSFS_BRANCH}" "${SUSFS_CLONE_TARGET_REL}" --depth=1
          if [ ! -d "${SUSFS_CLONE_TARGET_REL}" ]; then echo "错误: 克隆susfs4ksu失败"; exit 1; fi

          git clone https://github.com/ShirkNeko/SukiSU_patch.git "${SUKISU_PATCH_CLONE_TARGET_REL}" --depth=1
          if [ ! -d "${SUKISU_PATCH_CLONE_TARGET_REL}" ]; then echo "错误: 克隆SukiSU_patch失败"; exit 1; fi

          PATCH_FILE_NAME="50_add_susfs_in_${SUSFS_BRANCH}.patch" 
          EXPECTED_PATCH_PATH="${SUSFS_CLONE_TARGET_REL}/kernel_patches/${PATCH_FILE_NAME}"

          if [ ! -f "${EXPECTED_PATCH_PATH}" ]; then
              echo "错误: SUSFS补丁文件 ${EXPECTED_PATCH_PATH} 未找到!"
              exit 1
          fi
          
          cp "${EXPECTED_PATCH_PATH}" ./common/
          cp "${SUSFS_CLONE_TARGET_REL}/kernel_patches/fs/"* ./common/fs/
          cp "${SUSFS_CLONE_TARGET_REL}/kernel_patches/include/linux/"* ./common/include/linux/
          cp -r "${SUKISU_PATCH_CLONE_TARGET_REL}/other/zram/lz4k/include/linux/"* ./common/include/linux/
          cp -r "${SUKISU_PATCH_CLONE_TARGET_REL}/other/zram/lz4k/lib/"* ./common/lib/
          cp -r "${SUKISU_PATCH_CLONE_TARGET_REL}/other/zram/lz4k/crypto/"* ./common/crypto/
          if ! ${{ inputs.enable_feature_y }}; then 
            echo "LZ4KD已禁用，复制lz4k_oplus."
            cp -r "${SUKISU_PATCH_CLONE_TARGET_REL}/other/zram/lz4k_oplus" ./common/lib/
          else
            echo "LZ4KD已启用，跳过lz4k_oplus以避免潜在冲突."
          fi
          
          cd ./common 

          sed -i 's/-32,12 +32,38/-32,11 +32,37/g' "${PATCH_FILE_NAME}"
          sed -i '/#include <trace\/hooks\/fs.h>/d' "${PATCH_FILE_NAME}"

          patch -p1 < "${PATCH_FILE_NAME}" || echo "警告: SUSFS基础补丁可能未完全应用."
          cp "${GITHUB_WORKSPACE}/kernel_workspace/SukiSU_patch/hooks/syscall_hooks.patch" ./ 
          patch -p1 -F 3 < syscall_hooks.patch
          echo "完成'设置susfs'步骤."

      - name: Apply HMBird GKI patch
        run: |
          set -e
          echo "应用HMBird GKI补丁..."
          cd $GITHUB_WORKSPACE/kernel_workspace/kernel_platform/common/drivers
          cat << 'EOF' > hmbird_patch.c
          #include <linux/init.h>
          #include <linux/module.h>
          #include <linux/of.h>
          #include <linux/slab.h>
          #include <linux/string.h>

          static int __init hmbird_patch_init(void)
          {
              struct device_node *ver_np;
              const char *type;
              int ret;

              ver_np = of_find_node_by_path("/soc/oplus,hmbird/version_type");
              if (!ver_np) {
                   pr_info("hmbird_patch: version_type node not found\n");
                   return 0;
              }

              ret = of_property_read_string(ver_np, "type", &type);
              if (ret) {
                   pr_info("hmbird_patch: type property not found\n");
                   of_node_put(ver_np);
                   return 0;
              }

              if (strcmp(type, "HMBIRD_OGKI")) {
                   of_node_put(ver_np);
                   return 0;
              }

              struct property *prop = of_find_property(ver_np, "type", NULL);
              if (prop) {
                   struct property *new_prop = kmalloc(sizeof(*prop), GFP_KERNEL);
                   if (!new_prop) {
                        pr_info("hmbird_patch: kmalloc for new_prop failed\n");
                        of_node_put(ver_np);
                        return 0;
              }
              memcpy(new_prop, prop, sizeof(*prop));
              new_prop->value = kmalloc(strlen("HMBIRD_GKI") + 1, GFP_KERNEL);
              if (!new_prop->value) {
                   pr_info("hmbird_patch: kmalloc for new_prop->value failed\n");
                   kfree(new_prop);
                   of_node_put(ver_np);
                   return 0;
             }
             strcpy(new_prop->value, "HMBIRD_GKI");
             new_prop->length = strlen("HMBIRD_GKI") + 1;

             if (of_remove_property(ver_np, prop) != 0) {
                  pr_info("hmbird_patch: of_remove_property failed\n");
                  return 0;
             }
             if (of_add_property(ver_np, new_prop) !=0) {
                  pr_info("hmbird_patch: of_add_property failed\n");
                  return 0;
             }
             pr_info("hmbird_patch: success from HMBIRD_OGKI to HMBIRD_GKI\n");
          }
          else {
              pr_info("hmbird_patch: type property structure not found\n");
          }
          of_node_put(ver_np);
          return 0;
          }
          early_initcall(hmbird_patch_init);
          MODULE_LICENSE("GPL");
          MODULE_AUTHOR("reigadegr");
          MODULE_DESCRIPTION("Forcefully convert HMBIRD_OGKI to HMBIRD_GKI.");
          EOF
          
          if [ -f "Makefile" ]; then
              if ! grep -q "hmbird_patch.o" Makefile; then
                echo "obj-y += hmbird_patch.o" >> Makefile
                echo "HMBird补丁对象已添加到drivers/Makefile."
              else
                echo "HMBird补丁对象已在drivers/Makefile中."
              fi
          else
              echo "obj-y += hmbird_patch.o" > Makefile
              echo "创建drivers/Makefile并添加HMBird补丁对象."
          fi
          
          cd $GITHUB_WORKSPACE/kernel_workspace/kernel_platform 
          if ! git diff --quiet HEAD -- common/drivers/hmbird_patch.c common/drivers/Makefile; then
             echo "提交HMBird GKI补丁模块到本地内核源码树..."
             git add common/drivers/hmbird_patch.c common/drivers/Makefile
             git commit -m "Add HMBird GKI patch module"
          else
             echo "在kernel_platform中未找到新的HMBird文件或Makefile更改需要提交."
          fi
          echo "完成HMBird GKI补丁应用."

      - name: Apply LZ4KD Patches for ZRAM (if enabled)
        if: ${{ inputs.enable_feature_y == true }} 
        run: |
          set -e
          echo "ZRAM的LZ4KD已启用. 应用补丁..."
          cd $GITHUB_WORKSPACE/kernel_workspace/kernel_platform/common
          if [ ! -d "${GITHUB_WORKSPACE}/kernel_workspace/SukiSU_patch" ]; then 
            echo "为LZ4KD补丁克隆SukiSU_patch..."
            git clone https://github.com/ShirkNeko/SukiSU_patch.git ${GITHUB_WORKSPACE}/kernel_workspace/SukiSU_patch --depth=1
          fi
          cp "${GITHUB_WORKSPACE}/kernel_workspace/SukiSU_patch/other/zram/zram_patch/${{ github.event.inputs.KERNEL_VERSION }}/lz4kd.patch" ./
          patch -p1 -F 3 < lz4kd.patch || echo "警告: ZRAM的lz4kd补丁失败."
      
      - name: Apply ECN and TCP Pacing Tweaks via SED
        run: |
          set -e
          TCP_IPV4_PATH="$GITHUB_WORKSPACE/kernel_workspace/kernel_platform/common/net/ipv4/tcp_ipv4.c"
          if [ ! -f "$TCP_IPV4_PATH" ]; then echo "错误: $TCP_IPV4_PATH 未找到!"; exit 1; fi

          sed -i 's/net->ipv4.sysctl_tcp_ecn = 2;/net->ipv4.sysctl_tcp_ecn = 1;/' "$TCP_IPV4_PATH"
          sed -i 's/net->ipv4.sysctl_tcp_pacing_ss_ratio = 200;/net->ipv4.sysctl_tcp_pacing_ss_ratio = 150;/' "$TCP_IPV4_PATH"
          sed -i 's/net->ipv4.sysctl_tcp_pacing_ca_ratio = 120;/net->ipv4.sysctl_tcp_pacing_ca_ratio = 110;/' "$TCP_IPV4_PATH"
          echo "ECN和TCP Pacing优化已通过SED成功应用."
          
      - name: Add Kernel Configuration Settings and Custom Kernel Name
        run: |
          set -e
          cd $GITHUB_WORKSPACE/kernel_workspace/kernel_platform
          DEFCONFIG_PATH="./common/arch/arm64/configs/gki_defconfig"
          
          # 基础KSU和SUSFS配置
          echo "CONFIG_KSU=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_MANUAL_HOOK=y" >> "${DEFCONFIG_PATH}" 
          echo "CONFIG_KSU_SUSFS=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> "${DEFCONFIG_PATH}"

          # 加密和网络优化
          echo "CONFIG_CRYPTO_LZ4HC=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_CRYPTO_LZ4K=y" >> "${DEFCONFIG_PATH}" 
          echo "CONFIG_CRYPTO_842=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_TCP_CONG_ADVANCED=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_TCP_CONG_BBR=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_DEFAULT_BBR=y" >> "${DEFCONFIG_PATH}" 
          echo 'CONFIG_DEFAULT_TCP_CONG="bbr"' >> "${DEFCONFIG_PATH}"
          echo "CONFIG_NET_SCH_FQ=y" >> "${DEFCONFIG_PATH}" 
          echo "CONFIG_DEFAULT_FQ=y" >> "${DEFCONFIG_PATH}" 
          echo 'CONFIG_DEFAULT_NET_SCH="fq"' >> "${DEFCONFIG_PATH}"
          echo "CONFIG_TCP_CONG_BIC=n" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_TCP_CONG_WESTWOOD=n" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_TCP_CONG_HTCP=n" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_IP_NF_TARGET_TTL=y" >> "${DEFCONFIG_PATH}" 
          echo "CONFIG_IP6_NF_TARGET_HL=y" >> "${DEFCONFIG_PATH}" 
          echo "CONFIG_IP6_NF_MATCH_HL=y" >> "${DEFCONFIG_PATH}" 
          echo "CONFIG_IP_NF_TARGET_ECN=y" >> "${DEFCONFIG_PATH}"
          
          # ZRAM压缩设置
          if [ "${{ github.event.inputs.KERNEL_VERSION }}" != "5.10" ]; then
            echo "CONFIG_ZRAM_DEF_COMP_LZORLE=n" >> "${DEFCONFIG_PATH}"
            echo "CONFIG_ZRAM_DEF_COMP_LZO=n" >> "${DEFCONFIG_PATH}"
            if ${{ inputs.enable_feature_y }}; then 
              echo "CONFIG_CRYPTO_LZ4KD=y" >> "${DEFCONFIG_PATH}" 
              echo "# ZRAM的LZ4KD通过功能标志启用" >> "${DEFCONFIG_PATH}"
              echo "CONFIG_ZRAM_DEF_COMP_LZ4=n" >> "${DEFCONFIG_PATH}" 
              echo "CONFIG_ZRAM_DEF_COMP_LZ4KD=y" >> "${DEFCONFIG_PATH}"
              echo 'CONFIG_ZRAM_DEF_COMP="lz4kd"' >> "${DEFCONFIG_PATH}"
            else
              sed -i '/CONFIG_CRYPTO_LZ4KD/d' "${DEFCONFIG_PATH}" 
              echo "# CONFIG_CRYPTO_LZ4KD is not set" >> "${DEFCONFIG_PATH}"
              echo "# ZRAM的标准LZ4" >> "${DEFCONFIG_PATH}"
              echo "CONFIG_ZRAM_DEF_COMP_LZ4=y" >> "${DEFCONFIG_PATH}" 
              echo 'CONFIG_ZRAM_DEF_COMP="lz4"' >> "${DEFCONFIG_PATH}"
            fi
          else 
            echo "# 内核5.10的默认ZRAM压缩 (例如: LZ4)" >> "${DEFCONFIG_PATH}"
            echo "CONFIG_ZRAM_DEF_COMP_LZ4=y" >> "${DEFCONFIG_PATH}" 
            echo 'CONFIG_ZRAM_DEF_COMP="lz4"' >> "${DEFCONFIG_PATH}"
            sed -i '/CONFIG_CRYPTO_LZ4KD/d' "${DEFCONFIG_PATH}" 
            echo "# CONFIG_CRYPTO_LZ4KD is not set" >> "${DEFCONFIG_PATH}"
          fi
          
          echo "CONFIG_RCU_TRACE=n" >> "${DEFCONFIG_PATH}"

          # 休眠设置
          echo "CONFIG_HIBERNATION=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_HIBERNATION_COMPRESS=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_HIBERNATION_COMPRESS_ALGO_LZ4=y" >> "${DEFCONFIG_PATH}"

          # TMPFS XATTR和POSIX ACL支持
          echo "CONFIG_TMPFS_XATTR=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_TMPFS_POSIX_ACL=y" >> "${DEFCONFIG_PATH}"

          # Wireguard支持
          echo "CONFIG_WIREGUARD=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_INET=y" >> "${DEFCONFIG_PATH}" 
          echo "CONFIG_NET_UDP_TUNNEL=y" >> "${DEFCONFIG_PATH}" 
          echo "CONFIG_CRYPTO_LIB_CHACHA20POLY1305=y" >> "${DEFCONFIG_PATH}" 
          echo "CONFIG_CRYPTO_LIB_POLY1305=y" >> "${DEFCONFIG_PATH}" 
          echo "CONFIG_CRYPTO_LIB_CURVE25519=y" >> "${DEFCONFIG_PATH}" 

          # 内核名称defconfig设置
          echo "修改defconfig以使用自定义内核名称..."
          sed -i '/CONFIG_LOCALVERSION_AUTO/d' "${DEFCONFIG_PATH}" 
          echo "CONFIG_LOCALVERSION_AUTO=n" >> "${DEFCONFIG_PATH}" 
          sed -i '/CONFIG_LOCALVERSION=/d' "${DEFCONFIG_PATH}" 
          echo "CONFIG_LOCALVERSION=\"${{ github.event.inputs.KERNEL_SUFFIX }}\"" >> "${DEFCONFIG_PATH}"
          echo "Defconfig设置: CONFIG_LOCALVERSION=\"${{ github.event.inputs.KERNEL_SUFFIX }}\""

          sudo sed -i 's/check_defconfig//' ./common/build.config.gki
          cd common
          git add -A && git commit -m "使用功能、自定义名称、休眠、ZRAM逻辑、TMPFS、BBR/FQ、Wireguard更新defconfig" --allow-empty || echo "没有defconfig更改需要提交."
      
      - name: Add KPM Configuration Settings
        if: ${{ inputs.enable_feature_x == true }}
        run: |
          set -e
          cd $GITHUB_WORKSPACE/kernel_workspace/kernel_platform
          echo "CONFIG_KPM=y" >> ./common/arch/arm64/configs/gki_defconfig
          sudo sed -i 's/check_defconfig//' ./common/build.config.gki
          cd common
          git add -A && git commit -m "向defconfig添加KPM配置" --allow-empty || echo "没有KPM defconfig更改需要提交."

      - name: Apply Hide Stuff Patch 
        run: |
          set -e
          cd $GITHUB_WORKSPACE/kernel_workspace/kernel_platform/common
          if [ -f "$GITHUB_WORKSPACE/TheWildJames_kernel_patches/69_hide_stuff.patch" ]; then
            cp $GITHUB_WORKSPACE/TheWildJames_kernel_patches/69_hide_stuff.patch ./
            patch -p1 --no-backup-if-mismatch < 69_hide_stuff.patch || echo "警告: 69_hide_stuff.patch失败或应用时出现问题."
          else
            echo "警告: 在克隆的TheWildJames_kernel_patches仓库中未找到69_hide_stuff.patch，跳过."
          fi
                 
      - name: Add sched_ext (FengChi driver)
        if: ${{ inputs.enable_feature_z == true }}
        run: |
         set -e
         echo "添加sched_ext (风驰驱动)..."
         cd $GITHUB_WORKSPACE/kernel_workspace/kernel_platform/
         git clone https://github.com/HanKuCha/sched_ext.git ./sched_ext_temp --depth=1
         cp -r ./sched_ext_temp/* ./common/kernel/sched
         rm -rf ./sched_ext_temp
         cd $GITHUB_WORKSPACE/kernel_workspace/kernel_platform/common 
         if git status --porcelain | grep -q "kernel/sched"; then # 检查sched目录中是否有更改
            git add kernel/sched/
            git commit -m "添加/更新sched_ext (风驰驱动)"
         else
            echo "sched_ext的kernel/sched中没有更改需要提交."
         fi
         
      - name: Set Kernel build timestamp
        run: |
          export SOURCE_DATE_EPOCH=$(date -d "${{ github.event.inputs.KERNEL_TIME }}" +%s)
          echo "SOURCE_DATE_EPOCH=$SOURCE_DATE_EPOCH" >> $GITHUB_ENV
          
      - name: Build Kernel
        run: |
           set -e
           cd $GITHUB_WORKSPACE/kernel_workspace/kernel_platform
           export SOURCE_DATE_EPOCH=${{ env.SOURCE_DATE_EPOCH }}
           export PATH="/usr/lib/ccache:$PATH" 
           echo "使用CCACHE目录: $CCACHE_DIR"
           echo "构建前的Ccache统计信息:"
           ccache -s

           tools/bazel run --config=fast --config=stamp --lto=thin --verbose_failures //common:kernel_aarch64_dist -- --dist_dir=dist
           
           echo "构建后的Ccache统计信息:"
           ccache -s

      - name: Make AnyKernel3 (Patch Image)
        run: |
         set -e
         cd $GITHUB_WORKSPACE/kernel_workspace/kernel_platform/dist/
         curl -LO https://github.com/ShirkNeko/SukiSU_KernelPatch_patch/releases/download/0.11-beta/patch_linux
         chmod +x patch_linux
         ./patch_linux
         if [ -f "oImage" ]; then
           rm -f Image 
           mv oImage Image
         else
           echo "警告: 未找到oImage. 假设patch_linux就地修改了Image或未创建oImage."
         fi
         
      - name: Prepare AnyKernel3 Zip
        id: prepare_zip 
        run: |
         set -e
         cd $GITHUB_WORKSPACE 
         
         FINAL_ZIP_NAME="SuKiSu_GKI_${KSUVER}_${{ inputs.FEIL }}"
         if ${{ inputs.enable_feature_y }}; then
           FINAL_ZIP_NAME="${FINAL_ZIP_NAME}_LZ4KD"
         else
           FINAL_ZIP_NAME="${FINAL_ZIP_NAME}_LZ4"
         fi
         FINAL_ZIP_NAME="${FINAL_ZIP_NAME}_BBR_ECN" 
         if ${{ inputs.enable_feature_x }}; then 
           FINAL_ZIP_NAME="${FINAL_ZIP_NAME}_KPM"
         fi
         if ${{ inputs.enable_feature_z }}; then
           FINAL_ZIP_NAME="${FINAL_ZIP_NAME}_FengChi"
         fi
         
         FINAL_ZIP_NAME="${FINAL_ZIP_NAME}_sst2020.zip" 

         echo "生成的ZIP文件名: ${FINAL_ZIP_NAME}"
         echo "zip_filename=${FINAL_ZIP_NAME}" >> $GITHUB_OUTPUT

         git clone https://github.com/HanKuCha/AnyKernel3.git AnyKernel3_Package --depth=1      
         rm -rf ./AnyKernel3_Package/.git
         rm -rf ./AnyKernel3_Package/push.sh
         
         if [ -f "$GITHUB_WORKSPACE/kernel_workspace/kernel_platform/dist/Image" ]; then
           cp $GITHUB_WORKSPACE/kernel_workspace/kernel_platform/dist/Image ./AnyKernel3_Package/
           echo "Image已复制到AnyKernel3_Package."
         else
           echo "错误: 未找到$GITHUB_WORKSPACE/kernel_workspace/kernel_platform/dist/Image用于AnyKernel3打包!"
           exit 1
         fi
         
         cd AnyKernel3_Package
         zip -r9 "../${FINAL_ZIP_NAME}" .
         cd ..
        env:
          KSUVER: ${{ env.KSUVER }} 

      - name: Upload AnyKernel3 Zip
        uses: actions/upload-artifact@v4
        with:
         name: ${{ steps.prepare_zip.outputs.zip_filename }}
         path: ${{ steps.prepare_zip.outputs.zip_filename }}
